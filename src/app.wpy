<style lang='less'>
  @import "less/mixin";

  page {
    display: flex;
    flex-direction: column;
    height: 100%;
    background-color: #fff;
    font-size: 28rpx;
    font-family: -apple-system-font, 'Helvetica Neue', Helvetica, 'Microsoft YaHei', sans-serif;
    box-sizing: border-box;
  }

  .page {
    flex: 1;
    display: flex;
  }

  .container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
  }

  image {
    vertical-align: top;
  }

  .h {
    color: #03468f;
  }


  picker {
    flex: 1;
    width: 100%;
    border: 2rpx solid #ccc;
    background-color: #fff;
    border-radius: 8rpx;

    &.disabled {
      opacity: 0.7;
      pointer-events: none;
    }
  }

  .picker {
    padding: 12rpx 24rpx;
    font-size: 28rpx;
    box-sizing: border-box;
    .flex-v-center();
    justify-content: space-between;

    &.large {
      height: @large;
      font-size: 32rpx;
    }
    &.normal {
      height: @normal;
    }
    &.small {
      height: @small;
    }

    .icon {
      padding: 0;

      .icon-img {
        width: 20rpx !important;
        height: 20rpx !important;
        vertical-align: middle;
      }
    }
  }

  .table-row {
    .flex-v-center();
    &:not(:last-child) {
      border-bottom: 1px solid #eee;
    }
    background-color: #fff;

    &:active {
      background-color: #f0f0f0;
    }
  }

  .table-header {
    border-top: 1px solid #eee;
    border-bottom: 0;

    .table-cell {
      font-size: 26rpx;
    }
  }

  .table-cell {
    flex: 1;
    padding: 24rpx 10rpx;
    text-align: center;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;

    &.order {
      flex: none;
      width: 60rpx;
    }

    &.th {
      color: #777;
    }

    .icon {
      padding: 0;
    }

    .icon-delete {
      padding: 24rpx 10rpx;
      margin: -24rpx -10rpx;
    }
  }

  .wetoast__bd {
    min-height: auto !important;
    min-width: auto !important;
    padding: 8px 20px !important;
    top: 50% !important;
    transform: translate(-50%, -50%) !important;
  }

  .wetoast__bd__title {
    margin: 0 !important;
    font-size: 28rpx !important;
  }
</style>

<script>
  import wepy from 'wepy'
  import 'wepy-async-function'
  import './pollyfill'
  import wechat from './utils/wechat'
  import {toast, setLogout, redirectToLogin} from './utils/util'
  import {session} from './service/auth'
  import {updateToken} from './service/user'

  export default class extends wepy.app {
    config = {
      pages: [
        'pages/home/home',
        'pages/detail/detail',
        'pages/login/login',
        'pages/my/my'
      ],
      window: {
        navigationBarBackgroundColor: '#259b24',
        navigationBarTextStyle: '#fff',
        navigationBarTitleText: '美纳尼里硬件定位',
        backgroundColor: '#f0f0f0',
        backgroundTextStyle: 'dark',
        enablePullDownRefresh: false
      },
      networkTimeout: {
        request: 60000,
        connectSocket: 60000,
        uploadFile: 60000,
        downloadFile: 60000
      },
      debug: true
    }

    constructor() {
      super()
      this.use('requestfix')
      this.use('promisify')
    }

    globalData = {
      userInfo: null
    }

    getUserInfo() {
      return new Promise(async (resolve, reject) => {
        if (this.globalData.userInfo) return resolve(this.globalData.userInfo)

        wx.showLoading({
          mask: true,
          title: '请稍候...'
        })

        try {
          let res = await wechat.login()
          let user = await wechat.getUserInfo(res)
          this.globalData.userInfo = user.userInfo
          resolve(user.userInfo)
          wx.hideLoading()
        } catch (err) {
          reject(err)
          wx.hideLoading()
          console.error('failed to get user info, error: ' + err)
          setTimeout(() => {
            toast.error(err)
          })
        }
      })
    }

    onLaunch() {
      //this.getUserInfo()
      /*if (!session.get()) {
        redirectToLogin()
      }*/
    }

    onShow() {
      if (session.get()) {
        updateToken().then(res => {
          let sessionInfo = session.get()
          sessionInfo.token = res.data.token
          session.set(sessionInfo)
        })
      }
    }

    onHide() {
      setLogout(false)
    }
  }
</script>
