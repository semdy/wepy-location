<style lang="less">
  @import "../less/mixin";

  .form-item-wrap {
    flex: 1;
    .flex-v-center();

    &:not(.nomargin) {
      margin-bottom: 30rpx;
    }

    .form-item-label {
      margin-right: 10rpx;
    }
  }

  .form-item {
    background-color: #fff;
    border-radius: 8rpx;
    flex: 1;

    > .input{
      width: 100%;
      padding: 12rpx 24rpx;
      font-size: 28rpx;
      display: block;
      box-sizing: border-box;

      &.large {
        height: @large;
        font-size: 32rpx;
      }
      &.normal {
        height: @normal;
      }
      &.small {
        height: @small;
      }
    }

    > .icon {
      &.left {
        margin-right: -24rpx;
      }
      &.right {
        margin-left: -24rpx;
      }
    }

    &.bordered{
      border: 2rpx solid #ccc;
    }
  }
</style>
<template>
  <view class="form-item-wrap {{nomargin ? 'nomargin' : ''}}" style="{{style}}">
    <text wx:if="{{label}}" class="form-item-label">{{label}}</text>
    <view class="form-item {{bordered ? 'bordered' : ''}}">
      <iconleft wx:if="{{iconLeft}}" class="left" :name="iconLeft" :size="size" @tap.user="iconTap" />
      <input password="{{password}}" type="{{type}}" class="input {{size}}" focus="{{focus}}" disabled="{{disabled}}" placeholder="{{placeholder}}" value="{{value}}" maxlength="{{maxlength}}" @tap="tap" @input="input" @focus="focus" @blur="blur" @confirm="confirm" />
      <iconright wx:if="{{iconRight}}" class="right" :name="iconRight" :size="size" @tap.user="iconTap" />
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import Icon from './icon'

  const coerce = t =>
    typeof t === 'string' ? JSON.parse(t) : t

  export default class Formitem extends wepy.component {
    props = {
      style: {
        type: String,
        default: ''
      },
      label: String,
      iconLeft: String,
      iconRight: String,
      size: {
        type: String,
        default: 'normal'
      },
      value: {
        type: [String, Number],
        default: ''
      },
      maxlength: {
        type: [String, Number],
        default: -1,
        coerce: v => +v
      },
      placeholder: String,
      bordered: {
        type: [Boolean, String],
        default: true,
        coerce: coerce
      },
      nomargin: {
        type: [Boolean, String],
        default: false,
        coerce: coerce
      },
      type: {
        type: String,
        default: 'text'
      },
      password: {
        type: [Boolean, String],
        default: false,
        coerce: coerce
      },
      focus: {
        type: [Boolean, String],
        default: false,
        coerce: coerce
      },
      disabled: {
        type: [Boolean, String],
        default: false,
        coerce: coerce
      }
    }

    components = {
      iconleft: Icon,
      iconright: Icon
    }

    data = {

    }
    computed = {
      iconLeft () {
        if (this.iconRight === true) {
          return this.iconLeft = false
        }
        return this.iconLeft
      }
    }
    methods = {
      tap (e) {
        this.$emit('tap', e.detail.value, e)
      },
      input (e) {
        this.$emit('input', e.detail.value, e)
      },
      focus (e) {
        this.$emit('focus', e.detail.value, e)
      },
      blur (e) {
        this.$emit('blur', e.detail.value, e)
      },
      confirm (e) {
        this.$emit('confirm', e.detail.value, e)
      },
      iconTap (e) {
        this.$emit('iconTap', e.detail.value, e)
      }
    }
  }
</script>
