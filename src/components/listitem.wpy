<style type="less">
  @import "../less/mixin";

  .list-item{
    .flex-v-center();
    padding: 20rpx 40rpx;
    background-color: #fff;
    margin-bottom: 10rpx;
    border-top:2rpx solid #e5e5e5;
    border-bottom:2rpx solid #e5e5e5;

    .list-item-bd{
      .flex-v-center();
      flex: 1;
    }

    .list-item-icon {
      width: 72rpx;
      height: 72rpx;

      &.small {
        width: @small;
        height: @small;
      }

      &.left {
        margin-right: 20rpx;
      }

      &.right {
        margin-left: 20rpx;
      }
    }

    .list-item-arrow {
      width: 32rpx;
      height: 32rpx;
      margin-left: 12rpx;
      margin-right: -20rpx;
    }

    &:active{
      background-color: rgba(255,255,255,.7);
    }
  }
</style>
<template>
  <view class="list-item {{className}}" style="{{style}}" @tap="tap">
    <image wx:if="{{icon&&iconLeft&&!iconRight}}" class="list-item-icon {{iconSize}} left" src="../images/{{icon}}" mode="aspectFit"></image>
    <view class="list-item-bd">
      <slot></slot>
    </view>
    <image wx:if="{{icon&&iconRight}}" class="list-item-icon {{iconSize}} right" src="../images/{{icon}}" mode="aspectFit"></image>
    <image wx:if="{{hasArrow}}" class="list-item-arrow" src="../images/arrow-right-o.svg" mode="aspectFit"></image>
  </view>
</template>
<script>
  import wepy from 'wepy'

  export default class Listitem extends wepy.component {
    props = {
      icon: String,
      iconLeft: {
        type: [Boolean, String],
        default: true,
        coerce: (t) => typeof t === 'string' ? JSON.parse(t) : t
      },
      iconRight: {
        type: [Boolean, String],
        default: false,
        coerce: (t) => typeof t === 'string' ? JSON.parse(t) : t
      },
      iconSize: {
        type: String,
        default: 'large'
      },
      style: {
        type: String,
        default: ''
      },
      className: {
        type: String,
        default: ''
      },
      hasArrow: {
        type: [Boolean, String],
        default: false,
        coerce: (t) => typeof t === 'string' ? JSON.parse(t) : t
      }
    }
    components = {
    }
    data = {
    }
    methods = {
      tap ($event) {
        this.$emit('tap', Number(this.$index), $event)
      }
    }
  }
</script>
