<style lang="less">
  @import "../../less/mixin";

  page {
    display: block;
    height: auto;
  }

  .my-logo{
    margin: 5% 30%;

    > image{
      display: block;
      width: 500rpx;
      height: 300rpx;
    }
  }

  .my-avatar-holder {
    position: relative;
    background-color: #fff;
    padding-bottom: 30rpx;
    height: 80rpx;
  }

  .my-avatar {
    .flex-center();
    position: absolute;
    width: 150rpx;
    height: 150rpx;
    background-color: #fff;
    border: 4rpx solid #ccc;
    border-radius: 50%;
    left: 20rpx;
    top: -75rpx;
    overflow: hidden;

     image {
       width: 150rpx;
       height: 150rpx;
       border-radius: 50%;
     }
  }

  .point-listgroup {
    position: relative;
  }

  .point-listgroup {
    .list-item {
      margin-bottom: 0;
      margin-top: -2rpx;

      &:last-child {
        margin-top: 10rpx;
      }
    }
  }

  .list-item-text{
    flex: 1;
  }

  .page-actions {
    padding: 50rpx 60rpx;
  }

  .modal-footer {
    .flex-h-center();
    padding-top: 30rpx;
  }

  .update-button {
    .flex-center();
    padding-left: 40rpx;
    padding-right: 40rpx;
    border-radius: 8rpx;
    flex-direction: row;
    color: #fff;
    background-color: @gcolor;
    height: @normal;

    &:active {
      background-color: darken(@gcolor, 10%);
    }

    &.cancel {
      color: #666;
      background-color: #e0e0e0;
      margin-right: 40rpx;
      &:active{
        background-color: darken(#e5e5e5, 10%);
      }
    }

  }

  .subview {
    background-color: #f7f7f7;
  }
  .subview-item {
    padding: 24rpx 30rpx 24rpx 120rpx;

    &:active {
      background-color: rgba(0,0,0,.08);
    }
  }
</style>
<template>
  <view class="container">
    <view class="my-logo">
      <image src="../../images/login_logo.png" mode="aspectFit"></image>
    </view>
  </view>
  <view class="my-avatar-holder">
    <view class="my-avatar">
      <image src="../../images/avatar.svg" mode="aspectFit" wx:if="{{!avatar}}"></image>
      <image src="{{avatar}}" mode="aspectFit" wx:if="{{avatar}}"></image>
    </view>
  </view>
  <view class="point-listgroup">
    <repeat for="{{listgroup}}">
      <listitem :icon="item.icon" :iconSize="item.iconSize" :hasArrow="item.hasArrow" @tap.user="listitemTap">
        <view class="list-item-text">
          <text>{{item.label}}</text>
          <text>{{item.content}}</text>
        </view>
      </listitem>
      <view class="subview" wx:if="{{item.showSubview&&sessions.length>0}}" style="display: {{subviewShown ? 'block': 'none'}}">
        <repeat for="{{sessions}}" item="sub">
          <view class="subview-item" @tap="subviewTap({{sub}})">{{sub.name}}</view>
        </repeat>
      </view>
    </repeat>
  </view>

  <view class="page-actions">
    <logoutbutton @tap.user="logoutTap">退出登录</logoutbutton>
  </view>

  <modal wx:if="{{isModalShow}}" title="修改邮箱" @modalClose.user="closeModal">
    <view>
      <view class="form-item bordered">
        <input type="text" value="{{email}}" class="input normal" @input="emailChange"/>
      </view>
    </view>
    <view class="modal-footer">
      <view class="update-button cancel" @tap="closeModal">取消</view>
      <view class="update-button" @tap="saveEmailTap">保存</view>
    </view>
  </modal>

</template>

<script>
  import wepy from 'wepy'
  import fetch from '../../service/fetch'
  import Listitem from '../../components/listitem'
  import Button from '../../components/button'
  import Modal from '../../components/modal'
  import Formitem from '../../components/formitem'
  import {showError, showToast} from '../../utils/util'
  import {session, sessionGroup} from '../../service/auth'
  import {login, logout, checkAndSetSessionByUserId} from '../../service/user'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '我的'
    }

    components = {
      listitem: Listitem,
      emailinput: Formitem,
      logoutbutton: Button,
      modal: Modal
    }

    tmpEmail = ''

    data = {
      isModalShow: false,
      subviewShown: false,
      avatar: '',
      copername: '',
      phone: '',
      email: '',
      sessions: [],
      listgroup: [
        {
          icon: 'user.svg',
          iconSize: 'small',
          label: '公司名：',
          content: '',
          type: 'company',
          hasArrow: true,
          showSubview: true
        },
        {
          icon: 'mobile2.svg',
          iconSize: 'small',
          label: '手机号：',
          content: '',
          type: 'phone'
        },
        {
          icon: 'email.svg',
          iconSize: 'small',
          label: '邮箱：',
          content: '',
          type: 'email'
        },
        {
          icon: 'gift.svg',
          iconSize: 'small',
          label: '我的积分',
          type: 'point',
          hasArrow: true
        }
      ]
    }

    computed = {
    }

    watch = {
      copername (val) {
        this.setListItemValue('company', val)
      },
      phone (val) {
        this.setListItemValue('phone', val)
      },
      email (val) {
        this.tmpEmail = val
        this.setListItemValue('email', val)
      }
    }

    methods = {
      listitemTap (index) {
        if (index === 0) {
          this.toggleSubview()
        }
        if (index === 2) {
          this.showModal()
        }
        if (index === 3) {
          this.$navigate('/pages/point/point')
        }
      },
      logoutTap () {
        logout()
      },
      saveEmailTap () {
        if (!/^\w+@\w+\.\w+$/.test(this.tmpEmail)) {
          return showError('请正确填写邮箱地址')
        }
        this.updateUser(this.tmpEmail).then(e => {
          this.email = this.tmpEmail
          this.tmpEmail = ''
          this.hideModal()
          showToast(e.message)
        }, showError)
      },
      closeModal () {
        this.hideModal()
      },
      subviewTap (item) {
        let userId = item.id
        /*this.login(userId).then(res => {
          this.changeSession()
          this.hideSubview()
          wx.removeStorageSync('needRefresh.home')
        }, msg => {
          wx.showModal({
            title: '提示',
            content: msg,
            showCancel: false
          })
        })*/
        checkAndSetSessionByUserId(userId).then(() => {
          this.changeSession()
          this.hideSubview()
        }, showError)
      },
      emailChange (e) {
        this.tmpEmail = e.detail.value
      }
    }

    showSubview () {
      this.subviewShown = true
      this.$apply()
    }

    hideSubview() {
      this.subviewShown = false
      this.$apply()
    }

    toggleSubview() {
      this.subviewShown = !this.subviewShown
      this.$apply()
    }

    showModal () {
      this.isModalShow = true
      this.$apply()
    }

    hideModal () {
      this.isModalShow = false
      this.$apply()
    }

    setListItemValue(flag, value) {
      let item = this.listgroup.find(e => e.type === flag)
      if (item) {
        item.content = value
      }
    }

    updateUser(email) {
      let params = {
        email,
        userId: session.get().user.id
      }
      return new Promise((resolve, reject) => {
        fetch.post('update/user', params).then(res => {
          if (res.success) {
            resolve(res)
          } else {
            reject(res.message)
          }
        }, reject)
      })
    }

    login (userId) {
      return new Promise((resolve, reject) => {
        let curSession = sessionGroup.get(userId)
        if (curSession) {
          let user = curSession.user
          this.$parent.getUserInfo().then(userInfo => {
            login(user.code, user.phone).then((res) => {
              let sessionData = Object.assign({}, userInfo, res.data)
              session.set(sessionData)
              sessionGroup.add(res.data.user.id, sessionData)
              resolve(sessionData)
            }, () => {
              reject('公司码或手机号错误，请重试或联系管理人员')
            })
          }, reject)
        } else {
          reject('未找到当前用户信息')
        }
      })
    }

    changeSession () {
      let curSession = session.get()
      if (curSession) {
        this.setParams(curSession)
        this.sessions = this.getSessions()
      }
    }

    getSessions () {
      let sessions = []
      let curSession = session.get()
      sessionGroup.toArray().forEach(item => {
        if (item.user.id === curSession.user.id) return false
        sessions.push({id: item.user.id, name: item.user.name})
      })

      return sessions
    }

    setParams(data) {
      this.avatar = data.avatarUrl
      this.copername = data.user.name
      this.phone = data.user.phone
      this.email = data.user.email || ''
    }

    onLoad () {
      this.sessions = this.getSessions()
      this.setParams(session.get())
    }
  }
</script>
